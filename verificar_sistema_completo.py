#!/usr/bin/env python3
"""
Script de Verifica√ß√£o Completa do CondoTech Solutions
Verifica todos os aspectos do sistema para identificar poss√≠veis problemas
"""

import os
import sys
import importlib
from pathlib import Path

def verificar_estrutura_arquivos():
    """Verificar se todos os arquivos essenciais existem"""
    print("üîç Verificando estrutura de arquivos...")
    
    arquivos_essenciais = [
        'app/__init__.py',
        'app/models.py',
        'app/routes.py',
        'app/auth.py',
        'app/forms.py',
        'app/manutencao_routes.py',
        'app/admin_routes.py',
        'app/salva_vidas_routes.py',
        'app/middleware.py',
        'app/config.py',
        'run.py'
    ]
    
    problemas = []
    for arquivo in arquivos_essenciais:
        if not os.path.exists(arquivo):
            problemas.append(f"‚ùå Arquivo faltando: {arquivo}")
        else:
            print(f"‚úÖ {arquivo}")
    
    return problemas

def verificar_templates():
    """Verificar templates essenciais"""
    print("\nüé® Verificando templates...")
    
    templates_essenciais = [
        'app/templates/base.html',
        'app/templates/index.html',
        'app/templates/auth/login.html',
        'app/templates/admin/dashboard.html',
        'app/templates/admin/tenants.html',
        'app/templates/admin/tenant_detalhe.html',
        'app/templates/admin/modulos.html',
        'app/templates/admin/system_info.html',
        'app/templates/manutencao/dashboard.html',
        'app/templates/manutencao/listar_chamados.html',
        'app/templates/manutencao/novo_chamado.html',
        'app/templates/manutencao/ver_chamado.html',
        'app/templates/manutencao/editar_chamado.html',
        'app/templates/manutencao/categorias.html'
    ]
    
    problemas = []
    for template in templates_essenciais:
        if not os.path.exists(template):
            problemas.append(f"‚ùå Template faltando: {template}")
        else:
            print(f"‚úÖ {template}")
    
    return problemas

def verificar_imports():
    """Verificar se todos os imports est√£o funcionando"""
    print("\nüì¶ Verificando imports e depend√™ncias...")
    
    try:
        # Testar imports principais
        sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))
        
        print("‚úÖ Testing Flask...")
        import flask
        
        print("‚úÖ Testing SQLAlchemy...")
        import sqlalchemy
        
        print("‚úÖ Testing Flask-Login...")
        import flask_login
        
        print("‚úÖ Testing Flask-Mail...")
        import flask_mail
        
        print("‚úÖ Testing WTForms...")
        import wtforms
        
        print("‚úÖ Testing app modules...")
        from app.models import Usuario, Tenant, Modulo
        from app.forms import LoginForm, ChamadoManutencaoForm
        
        return []
        
    except ImportError as e:
        return [f"‚ùå Erro de import: {str(e)}"]
    except Exception as e:
        return [f"‚ùå Erro inesperado: {str(e)}"]

def verificar_rotas_admin():
    """Verificar se todas as rotas admin est√£o definidas"""
    print("\nüîß Verificando rotas administrativas...")
    
    rotas_esperadas = [
        'dashboard',
        'listar_tenants',
        'detalhe_tenant',
        'toggle_modulo_tenant',
        'listar_modulos',
        'editar_modulo',
        'toggle_modulo',
        'garantir_admin_acesso',
        'system_info'
    ]
    
    try:
        from app.admin_routes import admin_bp
        
        rotas_definidas = []
        for rule in admin_bp.url_map.iter_rules():
            rotas_definidas.append(rule.endpoint.split('.')[-1])
        
        problemas = []
        for rota in rotas_esperadas:
            endpoint = f"admin.{rota}"
            if rota not in rotas_definidas:
                problemas.append(f"‚ùå Rota admin faltando: {rota}")
            else:
                print(f"‚úÖ admin.{rota}")
        
        return problemas
        
    except Exception as e:
        return [f"‚ùå Erro ao verificar rotas admin: {str(e)}"]

def verificar_rotas_manutencao():
    """Verificar rotas de manuten√ß√£o"""
    print("\nüî® Verificando rotas de manuten√ß√£o...")
    
    rotas_esperadas = [
        'dashboard',
        'listar_chamados',
        'novo_chamado',
        'ver_chamado',
        'editar_chamado',
        'categorias',
        'nova_categoria',
        'editar_categoria',
        'toggle_categoria',
        'excluir_categoria'
    ]
    
    try:
        from app.manutencao_routes import manutencao_bp
        
        rotas_definidas = []
        for rule in manutencao_bp.url_map.iter_rules():
            rotas_definidas.append(rule.endpoint.split('.')[-1])
        
        problemas = []
        for rota in rotas_esperadas:
            if rota not in rotas_definidas:
                problemas.append(f"‚ùå Rota manuten√ß√£o faltando: {rota}")
            else:
                print(f"‚úÖ manutencao.{rota}")
        
        return problemas
        
    except Exception as e:
        return [f"‚ùå Erro ao verificar rotas manuten√ß√£o: {str(e)}"]

def verificar_modelos():
    """Verificar se todos os modelos est√£o bem definidos"""
    print("\nüóÉÔ∏è Verificando modelos do banco de dados...")
    
    try:
        from app.models import (
            Usuario, Tenant, Plano, Modulo, ModuloTenant,
            ChamadoManutencao, CategoriaManutencao, AnexoChamado, HistoricoChamado,
            Morador, SalvaVidas, RegistroAcesso
        )
        
        modelos = [
            ('Usuario', Usuario),
            ('Tenant', Tenant),
            ('Plano', Plano),
            ('Modulo', Modulo),
            ('ModuloTenant', ModuloTenant),
            ('ChamadoManutencao', ChamadoManutencao),
            ('CategoriaManutencao', CategoriaManutencao),
            ('AnexoChamado', AnexoChamado),
            ('HistoricoChamado', HistoricoChamado),
            ('Morador', Morador),
            ('SalvaVidas', SalvaVidas),
            ('RegistroAcesso', RegistroAcesso)
        ]
        
        problemas = []
        for nome, modelo in modelos:
            try:
                # Verificar se tem as propriedades b√°sicas
                if not hasattr(modelo, '__tablename__'):
                    problemas.append(f"‚ùå {nome}: falta __tablename__")
                elif not hasattr(modelo, 'id'):
                    problemas.append(f"‚ùå {nome}: falta campo id")
                else:
                    print(f"‚úÖ {nome}")
            except Exception as e:
                problemas.append(f"‚ùå {nome}: {str(e)}")
        
        return problemas
        
    except ImportError as e:
        return [f"‚ùå Erro ao importar modelos: {str(e)}"]

def verificar_formularios():
    """Verificar se todos os formul√°rios est√£o bem definidos"""
    print("\nüìã Verificando formul√°rios...")
    
    try:
        from app.forms import (
            LoginForm, CadastroUsuarioForm, MoradorForm,
            ChamadoManutencaoForm, FiltrosChamadosForm,
            SalvaVidasForm, BuscaMoradorForm
        )
        
        formularios = [
            'LoginForm', 'CadastroUsuarioForm', 'MoradorForm',
            'ChamadoManutencaoForm', 'FiltrosChamadosForm',
            'SalvaVidasForm', 'BuscaMoradorForm'
        ]
        
        for form in formularios:
            print(f"‚úÖ {form}")
        
        return []
        
    except ImportError as e:
        return [f"‚ùå Erro ao importar formul√°rios: {str(e)}"]

def verificar_configuracao():
    """Verificar configura√ß√µes importantes"""
    print("\n‚öôÔ∏è Verificando configura√ß√µes...")
    
    problemas = []
    
    # Verificar requirements.txt
    if not os.path.exists('requirements.txt'):
        problemas.append("‚ùå requirements.txt n√£o encontrado")
    else:
        print("‚úÖ requirements.txt")
    
    # Verificar config.py
    try:
        from app.config import Config
        print("‚úÖ app.config.Config")
    except ImportError:
        problemas.append("‚ùå Erro ao importar Config")
    
    # Verificar se run.py est√° configurado
    if os.path.exists('run.py'):
        print("‚úÖ run.py")
    else:
        problemas.append("‚ùå run.py n√£o encontrado")
    
    return problemas

def gerar_relatorio(todos_problemas):
    """Gerar relat√≥rio final"""
    print("\n" + "="*60)
    print("üìä RELAT√ìRIO FINAL DE VERIFICA√á√ÉO")
    print("="*60)
    
    if not any(todos_problemas.values()):
        print("üéâ PARAB√âNS! Sistema completamente verificado!")
        print("‚úÖ Todos os componentes est√£o funcionando corretamente.")
        print("\nüöÄ O CondoTech Solutions est√° pronto para uso!")
        return True
    else:
        print("‚ö†Ô∏è PROBLEMAS ENCONTRADOS:")
        total_problemas = 0
        
        for categoria, problemas in todos_problemas.items():
            if problemas:
                print(f"\nüìÇ {categoria.upper()}:")
                for problema in problemas:
                    print(f"   {problema}")
                    total_problemas += 1
        
        print(f"\nüìà Total de problemas: {total_problemas}")
        print("\nüîß Corrija os problemas acima antes de usar o sistema.")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üõ†Ô∏è CondoTech Solutions - Verifica√ß√£o Completa do Sistema")
    print("="*60)
    
    # Executar todas as verifica√ß√µes
    problemas = {
        'estrutura_arquivos': verificar_estrutura_arquivos(),
        'templates': verificar_templates(),
        'imports': verificar_imports(),
        'rotas_admin': verificar_rotas_admin(),
        'rotas_manutencao': verificar_rotas_manutencao(),
        'modelos': verificar_modelos(),
        'formularios': verificar_formularios(),
        'configuracao': verificar_configuracao()
    }
    
    # Gerar relat√≥rio
    sucesso = gerar_relatorio(problemas)
    
    if sucesso:
        print("\nüåê Para iniciar o sistema:")
        print("   python run.py")
        print("\nüìö Para acessar a documenta√ß√£o:")
        print("   Verifique os arquivos .md no projeto")
        
    return 0 if sucesso else 1

if __name__ == "__main__":
    sys.exit(main()) 